#!/bin/bash

set -euo pipefail
TMP=".autofix"

function usage {
	echo "autofix filename.tex [glossary.tex]"
}

SPACE=false
ACCEPT=false
while true
do
	case "$1" in
	-s)	SPACE=true ;;
	-a)	ACCEPT=true ;;
	-*)	echo "Unknown option" >&2
		usage
		exit 2 ;;
	*) break ;;
	esac
	shift
done

if git rev-parse --git-dir > /dev/null 2>&1; then
	INGIT=true
else
	INGIT=false
fi

if $INGIT
then
	COMMIT=true
else
	COMMIT=false
fi

for i in "$@"
do
	if ! test -f "$i"
	then
		echo "$i: file not found"
		usage
		exit 2
	fi
	if $COMMIT && ! git diff --exit-code $i >/dev/null
	then
		echo "WARNING: There are un-commited changes in $i (I won't propose to commit)"
		COMMIT=false
	fi
	cp "$i" "$TMP.$i.backup"
	cp "$i" "$TMP.$i"
	echo -n >"$TMP.$i.msg"
done

function applysed {
	FILE="$1"
	shift
	TOT="$(echo "$@")"
	test -z "$TOT" && return 0
	HA=$(echo "$TOT" | sed -E 's/^.* # //')
	if sed "$@" $FILE >$FILE.tmp
	then
		if ! diff $FILE.tmp $FILE >/dev/null
		then
			echo "$FILE: fix: $HA"
			echo "fix: $HA" >>$FILE.msg
			mv  $FILE.tmp $FILE
		fi
	else
		echo "failed: sed $TOT $FILE"
		exit 1
	fi
}

function applysimplefixes {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	while read -r line
	do
		echo "$line" | grep '^#' >/dev/null && continue  # if commented exit
		applysed $FILE -E "/^[[:space:]]*%/! $line"
	done <<'EOF'
s/([[:space:]~(])e(|\.)(| )g(|\.)(|,|:)/\1\\eg./g # Change 'e.g.' to \eg.
s/([[:space:]~(])i(|\.)(| )e(|\.)(|,|:)/\1\\ie./g # Change 'i.e.' to \ie.
s/([[:space:]~(])w(|\.)(| )r(|\.)t(|\.)(|:)/\1\\wrt./g # Change 'w.r.t.' to \wrt.
s/[[:space:]~]et(\.|\. | )al(\.|)/~\\etal./g # Change 'et al' to \etal.
s/([[:space:]][[:alpha:]]*)(\.|,)([[:alpha:]][[:alpha:]]*)\b/\1\2 \3/g # Adding missing spaces after dot or comma
s/((\.|,))[[:space:]]*$/\1/g # Deleting spaces at the end of line after dot or comma
s/\.[[:space:]][[:space:]]*([[:upper:]])/\.\n\1/g # Making all sentences in new lines
s/([[:alpha:]])[[:space:]]*([\\](ref|cite|fig))/\1~\2/g # Adding non-bracking spaced before references
s/(figure|Fig\.|fig\.)~(\\)/Figure~\2/g # Correcting capital letter on Figure
s/(table|Tab\.|tab\.)~(\\)/Table~\2/g # Correcting capital letter on Table
#s/([[:space:]])-([[:space:]])/\1---\2/g # Making dash a long dash
EOF
}

function applydefs {
	echo -n >$TMP.defs.tex
	if grep '\\begin{document}' $TMP.tex >/dev/null
	then
		while read -r line; do
			COM=$(echo "$line" | sed -nE 's/^\\def(\\[[:alpha:].]*).*$/\1/p')
			test -z "$COM" && continue
			COM=$(echo "$line" | sed -nE 's/^\\def(\\[[:alpha:].]*).*$/\1/p')
			if ! grep -E '(\\def|\\newcommand)({|)\'$COM $TMP.tex >/dev/null
			then
				echo "fix: Adding definition for $COM"
				echo "$line" >>$TMP.defs.tex
			fi
		done <<'EOF'
\def\etal.{et\penalty50\ al.}
\def\eg.{e.g.,}
\def\ie.{i.e.,}
\def\wrt.{w.r.t.}
EOF

		(
			sed -e '/\\begin{document}/,$ d' $TMP.tex
			cat $TMP.defs.tex
			sed -ne '/\\begin{document}/,$ p' $TMP.tex
		) >$TMP.1.tex
		mv $TMP.1.tex $TMP.tex
	else
		echo "warning: no begin{document} so I'm not adding any definitions"
	fi
}



function getacronyms {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	echo "get acronyms from $FILE"
	sed -n -e 's/^.*\\newacronym{\([^}]*\)}{\([^}]*\)}.*$/\1 %%% \2/p' "$FILE" >>$TMP.acr.def
}

function applyacronyms {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	sed 's|\(.*\) %%% \(.*\)|s/\\([^{]\\)\2\\b/\\1\\gls{\1}/g # Fixing acronym \2|' $TMP.acr.def |
	while read -r line; do
		applysed "$FILE" "$line"
	done
}

function printmissingacr {
	sed -e 's/\\gls{[^}]*}//g' -e '/\\newacronym/d' $TMP.tex |
		grep -o '\b[[:upper:]][[:upper:]][[:upper:]]*\b' |
		sort | uniq >$TMP.acr.cur
	sort $TMP.acr.tex >$TMP.acr.def
	ACRS=$(
		comm $TMP.acr.cur $TMP.acr.def -23 |
		paste -sd ',' -
	)
	if ! test -z "$ACRS"
	then
		echo "warning: Consider adding these acronyms: $ACRS"
	fi
}

for i in "$@"
do
	applysimplefixes "$TMP.$i"
done

echo -n >$TMP.acr.def
for i in "$@"
do
	getacronyms "$TMP.$i"
done

for i in "$@"
do
	applyacronyms "$TMP.$i"
done

exit 2;

applyfixes | tee $TMP.0.msg

(
	echo "Corrections done with autofix script"
	echo
	cat $TMP.0.msg
) >$TMP.msg

if ! diff $TMP.tex $MAIN.tex >/dev/null
then
	meld $TMP.tex $MAIN.tex
	if $COMMIT
	then
		if ! git diff --exit-code $MAIN.tex >/dev/null
		then
			read -r -n 1 -p "Commit (y/n)? " choice
			echo
			case "$choice" in
			y|Y )
				git add $MAIN.tex
				git commit -eF $TMP.msg
				;;
			esac
		fi
	fi
else
	echo "Nothing was changed"
fi
