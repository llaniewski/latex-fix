#!/bin/bash

set -euo pipefail
TMP=".autofix"
PP=$(dirname $0)

function usage {
	echo "autofix [-s] [-a] [-f floats.tex] file.tex ..."
}

SPACE=false
ACCEPT=false
FLOATS=false
FLOATSTEX="" # tex file with floats
while true
do
	case "$1" in
	-s)	SPACE=true ;;
	-a)	ACCEPT=true ;;
	-f)	FLOATS=true
		shift
		FLOATSTEX="$1"
		if ! touch "$FLOATSTEX"
		then
			echo "Cannot touch $FLOATSTEX" >&2
			exit 3
		fi
		;;
	-*)	echo "Unknown option" >&2
		usage
		exit 2 ;;
	*) break ;;
	esac
	shift
done

if git rev-parse --git-dir > /dev/null 2>&1; then
	INGIT=true
else
	INGIT=false
fi

if $INGIT
then
	COMMIT=true
else
	COMMIT=false
fi

for i in "$@"
do
	if ! test -f "$i"
	then
		echo "$i: file not found"
		usage
		exit 2
	fi
	if $COMMIT && ! git diff --exit-code $i >/dev/null
	then
		echo "WARNING: There are un-commited changes in $i (I won't propose to commit)"
		COMMIT=false
	fi
	cp "$i" "$TMP.$i.backup"
	cp "$i" "$TMP.$i"
	echo -n >"$TMP.$i.msg"
done
echo -n >"$TMP.msg"
echo "Corrections done with autofix script" >>"$TMP.msg"
echo >>"$TMP.msg"

if $FLOATS
then
	i=FLOATSTEX
	if ! test -f "$i"
	then
		touch $i
	fi
	cp "$i" "$TMP.$i.backup"
	cp "$i" "$TMP.$i"
	echo -n >"$TMP.$i.msg"
fi

function applysed {
	FILE="$1"
	shift
	MSG="$1"
	shift
	if sed "$@" $FILE >$FILE.tmp
	then
		if ! diff $FILE.tmp $FILE >/dev/null
		then
			echo "$FILE: fix: $MSG"
			echo "- $MSG" >>$FILE.msg
			mv  $FILE.tmp $FILE
		fi
	else
		echo "failed: $MSG"
		echo "------: sed" "$@" "$FILE"
		exit 1
	fi
}

function applysedoneliner {
	FILE="$1"
	shift
	TOT="$(echo "$@")"
	test -z "$TOT" && return 0
	HA=$(echo "$TOT" | sed -E 's/^.* # //')
	applysed "$FILE" "$HA" "$@"
}

function applysimplefixes {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	while read -r line
	do
		echo "$line" | grep '^#' >/dev/null && continue  # if commented exit
		applysedoneliner $FILE -E "/^[[:space:]]*%/! $line"
	done <<'EOF'
s/([[:space:]~(])e(|\.)(| )g(|\.)(|,|:)/\1\\eg./g # Change 'e.g.' to \eg.
s/([[:space:]~(])i(|\.)(| )e(|\.)(|,|:)/\1\\ie./g # Change 'i.e.' to \ie.
s/([[:space:]~(])w(|\.)(| )r(|\.)t(|\.)(|:)/\1\\wrt./g # Change 'w.r.t.' to \wrt.
s/[[:space:]~]et(\.|\. | )al(\.|)/~\\etal./g # Change 'et al' to \etal.
s/([[:space:]][[:alpha:]]*)(\.|,)([[:alpha:]][[:alpha:]]*)\b/\1\2 \3/g # Adding missing spaces after dot or comma
s/((\.|,))[[:space:]]*$/\1/g # Deleting spaces at the end of line after dot or comma
s/\.[[:space:]][[:space:]]*([[:upper:]])/\.\n\1/g # Making all sentences in new lines
s/([[:alpha:]])[[:space:]]*([\\](ref|cite|fig))/\1~\2/g # Adding non-bracking spaces before references
s/(figure|Fig\.|fig\.)~(\\)/Figure~\2/g # Correcting capital letter on Figure
s/(table|Tab\.|tab\.)~(\\)/Table~\2/g # Correcting capital letter on Table
#s/([[:space:]])-([[:space:]])/\1---\2/g # Making dash a long dash
EOF
}

function applydefs {
	echo -n >$TMP.defs.tex
	if grep '\\begin{document}' $TMP.tex >/dev/null
	then
		while read -r line; do
			COM=$(echo "$line" | sed -nE 's/^\\def(\\[[:alpha:].]*).*$/\1/p')
			test -z "$COM" && continue
			COM=$(echo "$line" | sed -nE 's/^\\def(\\[[:alpha:].]*).*$/\1/p')
			if ! grep -E '(\\def|\\newcommand)({|)\'$COM $TMP.tex >/dev/null
			then
				echo "fix: Adding definition for $COM"
				echo "$line" >>$TMP.defs.tex
			fi
		done <<'EOF'
\def\etal.{et\penalty50\ al.}
\def\eg.{e.g.,}
\def\ie.{i.e.,}
\def\wrt.{w.r.t.}
EOF

		(
			sed -e '/\\begin{document}/,$ d' $TMP.tex
			cat $TMP.defs.tex
			sed -ne '/\\begin{document}/,$ p' $TMP.tex
		) >$TMP.1.tex
		mv $TMP.1.tex $TMP.tex
	else
		echo "warning: no begin{document} so I'm not adding any definitions"
	fi
}



function getacronyms {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	echo "get acronyms from $FILE"
	sed -n -e 's/^.*\\newacronym{\([^}]*\)}{\([^}]*\)}.*$/\1 %%% \2/p' "$FILE" >>$TMP.acr.def
}

function applyacronyms {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	sed 's|\(.*\) %%% \(.*\)|s/\\([[:space:](),.;]\\)\2\\([[:space:](),.;]\\)/\\1\\\\gls{\1}\\2/g # Fixing acronym \2|' $TMP.acr.def |
	while read -r line; do
		applysedoneliner "$FILE" "/^[[:space:]]*%/! $line"
	done
}

function getintextacr {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	sed -n -f $PP/acr.sed $FILE >>$TMP.acr.intext
}

function makeuniq {
	FILE="$1"
	if ! test -f "$FILE"
	then
		 echo "no file in applysimplefixes" >&2
		 exit 2
	fi
	cat $FILE | sort | uniq >$FILE.uniq
	mv $FILE.uniq $FILE
}	

function printmissingacr {
	ACRS=$(
		comm $TMP.acr.def.uniq $TMP.acr.intext.uniq -13 |
		sed -e '{:1 N; s/\n/, /; b1}'
	)
	if ! test -z "$ACRS"
	then
		echo "warning: Consider adding these acronyms: $ACRS"
		echo "**Warning:** Consider adding these acronyms: $ACRS" >>$TMP.msg
	fi
}

for i in "$@"
do
	applysimplefixes "$TMP.$i"
done

echo -n >$TMP.acr.def
echo -n >$TMP.acr.intext
for i in "$@"
do
	getacronyms "$TMP.$i"
	getintextacr "$TMP.$i"
done
cat $TMP.acr.def | sed -e 's/^.*%%% //' | sort | uniq >$TMP.acr.def.uniq
cat $TMP.acr.intext | sort | uniq >$TMP.acr.intext.uniq
printmissingacr

for i in "$@"
do
	applyacronyms "$TMP.$i"
done

if $FLOATS
then
	echo -n >.autofix.allfigs
	for i in "$@"
	do
		applysed "$TMP.$i" "Moving floats out to another file" -f $PP/figs.sed
		if test -s .autofix.tmp # check if empty
		then
			echo "- Adding floats from $i" >>$TMP.$FLOATSTEX.msg			
			cat .autofix.tmp >>$TMP.$FLOATSTEX
		fi
	done
fi

GITFILES=""
FLOATSCHECK=false
for i in "$@" "$FLOATSTEX"
do
	test -z "$i" && continue
	if test "$i" == "$FLOATSTEX"
	then
		$FLOATSCHECK && continue
		FLOATSCHECK=true
	fi

	if ! diff $i $TMP.$i >/dev/null
	then
		meld $TMP.$i $i
		if ! diff $i $TMP.$i.backup >/dev/null
		then
			if $COMMIT
			then
				GITFILES="$GITFILES $i"
			fi
			if ! diff $i $TMP.$i >/dev/null
			then
				echo "- Changes modified by user" >>"$TMP.$i.msg"
			else
				echo "- Changes accepted by user" >>"$TMP.$i.msg"
			fi	
		else
			echo "- Changes completely discarted by user" >>"$TMP.$i.msg"
		fi				

		echo >>"$TMP.msg"
		echo "File: $i" >>"$TMP.msg"
		cat "$TMP.$i.msg" >>"$TMP.msg"
	fi
done

if ! test -z "$GITFILES"
then
	read -r -n 1 -p "Commit (y/n)? " choice
	echo
	case "$choice" in
	y|Y )
		git add $GITFILES
		git commit -eF $TMP.msg
		;;
	esac
fi
